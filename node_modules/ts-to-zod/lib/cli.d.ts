import { Command, Interfaces } from "@oclif/core";
import { Config, TsToZodConfig, InputOutputMapping } from "./config";
declare class TsToZod extends Command {
    static description: string;
    static examples: Command.Example[];
    static usage: string[] | undefined;
    static flags: {
        version: Interfaces.BooleanFlag<void>;
        help: Interfaces.BooleanFlag<void>;
        keepComments: Interfaces.BooleanFlag<boolean>;
        init: Interfaces.BooleanFlag<boolean>;
        skipParseJSDoc: Interfaces.BooleanFlag<boolean>;
        skipValidation: Interfaces.BooleanFlag<boolean>;
        inferredTypes: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        watch: Interfaces.BooleanFlag<boolean>;
        config: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        all: Interfaces.BooleanFlag<boolean>;
    };
    static args: {
        input: Interfaces.Arg<string | undefined, {
            exists?: boolean | undefined;
        }>;
        output: Interfaces.Arg<string | undefined, {
            exists?: boolean | undefined;
        }>;
    };
    run(): Promise<void>;
    /**
     * Generate on zod schema file.
     * @param args
     * @param fileConfig
     * @param Flags
     * @param inputOutputMappings
     */
    generate(args: {
        input?: string;
        output?: string;
    }, fileConfig: Config | undefined, Flags: Interfaces.InferredFlags<typeof TsToZod.flags>, inputOutputMappings: InputOutputMapping[]): Promise<{
        success: true;
    } | {
        success: false;
        error: string;
    }>;
    /**
     * Load user config from `ts-to-zod.config.c?js`
     */
    loadFileConfig(config: TsToZodConfig | undefined, flags: Interfaces.InferredFlags<typeof TsToZod.flags>): Promise<TsToZodConfig | undefined>;
}
export = TsToZod;
