"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createImportNode = exports.getSingleImportIdentierForNode = exports.getImportIdentifiers = void 0;
const tslib_1 = require("tslib");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const { factory: f } = typescript_1.default;
/**
 * Extracts the list of import identifiers from an import clause
 * @param node an ImportDeclaration node
 * @returns an array of all identifiers found in statement
 */
function getImportIdentifiers(node) {
    var _a;
    if (!node.importClause)
        return [];
    const { importClause } = node;
    const importIdentifiers = [];
    // Case `import MyGlobal from "module";`
    if (importClause.name)
        importIdentifiers.push({ name: importClause.name.text });
    if (importClause.namedBindings) {
        // Cases `import { A, B } from "module"`
        // and `import C from "module"`
        if (typescript_1.default.isNamedImports(importClause.namedBindings)) {
            for (const element of importClause.namedBindings.elements) {
                if (typescript_1.default.isImportSpecifier(element)) {
                    importIdentifiers.push({
                        name: element.name.text,
                        original: (_a = element.propertyName) === null || _a === void 0 ? void 0 : _a.text,
                    });
                }
            }
        }
        // Case `import * as A from "module"`
        else if (typescript_1.default.isNamespaceImport(importClause.namedBindings)) {
            importIdentifiers.push({ name: importClause.namedBindings.name.text });
        }
    }
    return importIdentifiers;
}
exports.getImportIdentifiers = getImportIdentifiers;
function getSingleImportIdentierForNode(node, identifier) {
    const allIdentifiers = getImportIdentifiers(node);
    return allIdentifiers.find(({ name }) => name === identifier);
}
exports.getSingleImportIdentierForNode = getSingleImportIdentierForNode;
/**
 * Creates an import statement from the given arguments
 * @param identifiers array of types to import
 * @param path module path
 * @returns an ImportDeclaration node that corresponds to `import { ...identifiers } from "path"`
 */
function createImportNode(identifiers, path) {
    const specifiers = identifiers.map(({ name, original }) => f.createImportSpecifier(false, original ? f.createIdentifier(original) : undefined, f.createIdentifier(name)));
    return f.createImportDeclaration(undefined, f.createImportClause(false, undefined, f.createNamedImports(specifiers)), f.createStringLiteral(path));
}
exports.createImportNode = createImportNode;
//# sourceMappingURL=importHandling.js.map