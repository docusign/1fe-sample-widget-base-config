"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffChecker = void 0;
const coverageDiffer_1 = require("./coverageDiffer");
const helpers_1 = require("./helpers");
const helpers_2 = require("./helpers");
const index_1 = require("./index");
const diffChecker = (base, head, checkCriteria = index_1.defaultOptions.checkCriteria, coverageThreshold = index_1.defaultOptions.coverageThreshold, coverageDecreaseThreshold = index_1.defaultOptions.coverageDecreaseThreshold, newFileCoverageThreshold = coverageThreshold) => {
    let regression = false;
    let belowThreshold = false;
    const diff = (0, coverageDiffer_1.coverageDiffer)(base, head);
    const diffMap = (0, helpers_1.objectToMap)(diff);
    const percentageMap = new Map();
    const coverageDecreased = (x) => x < 0 ? Math.abs(x) >= coverageDecreaseThreshold : false;
    const isBelowThreshold = (x) => x < coverageThreshold;
    const isBelowNewFileThreshold = (x) => x < newFileCoverageThreshold;
    const checkItemBelowThreshold = (diff, coverageToCompare, checkCriteria) => {
        const condition = diff.isNewFile
            ? isBelowNewFileThreshold
            : isBelowThreshold;
        return checkCoverageForCondition(coverageToCompare, checkCriteria, condition);
    };
    const checkItemDecreased = (diff, checkCriteria) => {
        if (diff.isNewFile)
            return false;
        return checkCoverageForCondition(diff, checkCriteria, coverageDecreased);
    };
    diffMap.forEach((diff, fileName) => {
        const diffPercentages = (0, helpers_2.getSummaryPercentages)(diff);
        if (shouldExcludeItem(diff, diffPercentages)) {
            return;
        }
        const itemDecreased = checkItemDecreased(diff, checkCriteria);
        const itemBelowThreshold = checkItemBelowThreshold(diff, head[fileName], checkCriteria);
        if (fileName !== 'total') {
            if (itemDecreased) {
                regression = true;
            }
        }
        if (itemBelowThreshold) {
            belowThreshold = true;
        }
        percentageMap.set(fileName, {
            deltas: {
                ...diffPercentages
            },
            pcts: (0, helpers_2.getSummaryPercentages)(head[fileName]),
            isNewFile: diff.isNewFile,
            decreased: itemDecreased,
            belowThreshold: itemBelowThreshold
        });
    });
    let totals = percentageMap.get('total');
    if (!totals) {
        totals = {
            deltas: { lines: 0, functions: 0, statements: 0, branches: 0 },
            pcts: {
                lines: head.total.lines.pct,
                functions: head.total.functions.pct,
                statements: head.total.statements.pct,
                branches: head.total.branches.pct
            },
            decreased: false,
            belowThreshold: checkCoverageForCondition(head.total, checkCriteria, isBelowThreshold),
            isNewFile: false
        };
    }
    percentageMap.delete('total');
    return {
        files: (0, helpers_1.mapToObject)(percentageMap),
        diff,
        totals,
        regression,
        belowThreshold
    };
};
exports.diffChecker = diffChecker;
const checkCoverageForCondition = (coverage, checkCriteria, condition) => {
    const diffPercentages = (0, helpers_2.getSummaryPercentages)(coverage);
    const values = checkCriteria.map((criteria) => diffPercentages[criteria]);
    return values.some(condition);
};
const zeroTest = (x) => x === 0;
const shouldExcludeItem = (diff, diffPercentages) => {
    if (diff.isNewFile) {
        return false;
    }
    else {
        return Object.values(diffPercentages).every(zeroTest);
    }
};
